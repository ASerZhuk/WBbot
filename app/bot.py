import telebot
import json
import requests
import re
import g4f
from telebot import types
from firebase_manager import FirebaseManager
from payment_manager import PaymentManager
from config import BOT_TOKEN
import logging
from functools import lru_cache
from datetime import datetime
import os

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(BOT_TOKEN)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
firebase_manager = FirebaseManager()
payment_manager = PaymentManager()

# –°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
ADMIN_IDS = [1312244058]  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–æ –≤–∞—à ID

# –°–ª–æ–≤–∞—Ä–∏ —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏
TRANSLATIONS = {
    'ru': {
        'welcome': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
                   "üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, "
                   "–∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —Ç–æ–≤–∞—Ä–∞.\n\n"
                   "üí° –ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –∏ /refer –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥—Ä—É–∑–µ–π.",
        'help': "ü§ñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:\n\n"
                "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n"
                "2Ô∏è‚É£ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã –∏ –≤—ã–¥–µ–ª—é –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã\n"
                "3Ô∏è‚É£ –ö–∞–∂–¥—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 1 –ø–æ–ø—ã—Ç–∫—É\n\n"
                "üí∞ –ö–æ–≥–¥–∞ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ\n\n"
                "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_–∫–æ–Ω—Ç–∞–∫—Ç",
        # ... –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    },
    'en': {
        'welcome': "üëã Hello! I'm a bot for analyzing Wildberries products.\n\n"
                   "üîç Send me a link to a product on Wildberries or the product's SKU, "
                   "and I'll analyze the reviews to highlight the main pluses and minuses of the product.\n\n"
                   "üí° Use /help for help and /refer to invite friends.",
        'help': "ü§ñ How to use the bot:\n\n"
                "1Ô∏è‚É£ Send me a link to a product on Wildberries or simply the product's SKU\n"
                "2Ô∏è‚É£ I'll analyze the reviews and highlight the main pluses and minuses\n"
                "3Ô∏è‚É£ Each analysis consumes 1 attempt\n\n"
                "üí∞ When your attempts run out, you can purchase additional\n\n"
                "‚ùì If you have any questions or problems, write @your_contact",
        # ... –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–≤–æ–¥—ã
    }
}

class WbReview:
    def __init__(self, string: str):
        self.sku = self.get_sku(string=string)
        self.item_name = None  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ None
        self.root_id = None
        # –ü–æ–ª—É—á–∞–µ–º root_id –∏ item_name
        self.get_root_id()

    @staticmethod
    def get_sku(string: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞"""
        if "wildberries" in string:
            pattern = r"\d{7,15}"
            sku = re.findall(pattern, string)
            if sku:
                return sku[0]
            else:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞—Ä—Ç–∏–∫—É–ª")
        return string

    def get_root_id(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ id —Ä–æ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞"""
        try:
            response = requests.get(
                f'https://card.wb.ru/cards/v2/detail?appType=1&curr=rub&dest=-8144334&spp=30&nm={self.sku}',
                headers={'User-Agent': 'Mozilla/5.0'},
            )
            if response.status_code != 200:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å id —Ä–æ–¥–∏—Ç–µ–ª—è")
            
            data = response.json()
            if not data.get("data") or not data["data"].get("products") or len(data["data"]["products"]) == 0:
                raise Exception("–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            product = data["data"]["products"][0]
            self.item_name = product.get("name", "–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            self.root_id = product.get("root")
            if not self.root_id:
                raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å root_id —Ç–æ–≤–∞—Ä–∞")
            return self.root_id
        except Exception as e:
            logging.error(f"Error in get_root_id: {str(e)}")
            raise Exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ: {str(e)}")

    def get_review(self) -> json:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–æ–≤"""
        if not self.root_id:
            raise Exception("root_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        try:
            response = requests.get(f'https://feedbacks1.wb.ru/feedbacks/v1/{self.root_id}', 
                                  headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                if not response.json()["feedbacks"]:
                    raise Exception("–°–µ—Ä–≤–µ—Ä 1 –Ω–µ –ø–æ–¥–æ—à–µ–ª")
                return response.json()
        except Exception:
            response = requests.get(f'https://feedbacks2.wb.ru/feedbacks/v1/{self.root_id}', 
                                  headers={'User-Agent': 'Mozilla/5.0'})
            if response.status_code == 200:
                return response.json()

    def parse(self):
        json_feedbacks = self.get_review()
        if not json_feedbacks:
            return []
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ—Ç–∑—ã–≤—ã –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ SKU
        feedbacks = [feedback.get("text") for feedback in json_feedbacks["feedbacks"]
                     if str(feedback.get("nmId")) == self.sku]
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –ø–æ –¥–ª–∏–Ω–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å —Å—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        feedbacks.sort(key=len, reverse=True)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        if len(feedbacks) > 80:
            feedbacks = feedbacks[:80]
        
        return feedbacks

@lru_cache(maxsize=100)
def analyze_reviews_cached(sku, reviews_text):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤ —Å —É—á–µ—Ç–æ–º –∞—Ä—Ç–∏–∫—É–ª–∞ —Ç–æ–≤–∞—Ä–∞"""
    return analyze_reviews(reviews_text.split("\n"))

def analyze_reviews(reviews_list):
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—Ç–∑—ã–≤—ã —Å –ø–æ–º–æ—â—å—é G4F"""
    reviews_text = "\n\n".join(reviews_list)
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–µ–¥—É—é—â–∏—Ö –æ—Ç–∑—ã–≤–æ–≤ —Å Wildberries —Å–¥–µ–ª–∞–π –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞.
    –û—Ç–∑—ã–≤—ã:
    {reviews_text}
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
    
    ‚úÖ –ü–õ–Æ–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —á–∞—Å—Ç–æ —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –≤ –æ—Ç–∑—ã–≤–∞—Ö, —Ç–µ–∑–∏—Å–Ω–æ]

    ‚ùå –ú–ò–ù–£–°–´ –¢–û–í–ê–†–ê:
    - [–ø–µ—Ä–µ—á–∏—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–∏–Ω—É—Å—ã –∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏ –∏–∑ –æ—Ç–∑—ã–≤–æ–≤, —Ç–µ–∑–∏—Å–Ω–æ]
    
    üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:
    - [–¥–∞–π 2-3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º –ø–æ–∫—É–ø–∞—Ç–µ–ª—è–º]

    üìù –û–ë–©–ò–ô –í–´–í–û–î:
    [–∫—Ä–∞—Ç–∫–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ –æ —Ç–æ–≤–∞—Ä–µ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è]
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –∏–ª–∏ —Ä–µ–∫–ª–∞–º—ã –≤ –æ—Ç–≤–µ—Ç.
    """
    
    models = ["gpt-3.5-turbo", "gpt-4", "claude-v2", "gemini-pro"]
    
    for model in models:
        try:
            response = g4f.ChatCompletion.create(
                model=model,
                messages=[{"role": "user", "content": prompt}],
                timeout=30  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç
            )
            # –£–¥–∞–ª—è–µ–º —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Å—ã–ª–∫–∏ –∏–∑ –æ—Ç–≤–µ—Ç–∞
            cleaned_response = re.sub(r'https?://\S+', '', response)
            return cleaned_response.strip()
        except Exception as e:
            logging.error(f"Error with model {model}: {str(e)}")
            continue
    
    return "–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."

def get_user_language(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    return firebase_manager.get_user_language(user_id) or 'ru'

def get_text(key, user_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    lang = get_user_language(user_id)
    return TRANSLATIONS.get(lang, TRANSLATIONS['ru']).get(key, TRANSLATIONS['ru'][key])

@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
    if len(text.split()) > 1 and text.split()[1].startswith('ref'):
        try:
            referrer_id = int(text.split()[1][3:])
            if referrer_id != user_id:  # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç —Å–∞–º —Å–µ–±—è
                firebase_manager.add_referral(referrer_id, user_id)
                bot.send_message(
                    referrer_id,
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.\n"
                    f"–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞!"
                )
        except Exception as e:
            logging.error(f"Error processing referral: {str(e)}")
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    analyze_button = types.InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", callback_data="menu_analyze")
    stats_button = types.InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
    refer_button = types.InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="menu_refer")
    help_button = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in ADMIN_IDS:
        admin_button = types.InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")
        markup.add(analyze_button, stats_button, refer_button, help_button, admin_button)
    else:
        markup.add(analyze_button, stats_button, refer_button, help_button)
    
    bot.reply_to(message, 
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries.\n\n"
        "üîç –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, "
        "–∏ —è –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã, —á—Ç–æ–±—ã –≤—ã–¥–µ–ª–∏—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã —Ç–æ–≤–∞—Ä–∞.\n\n"
        "–ò–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=markup
    )

@bot.message_handler(commands=['help'])
def send_help(message):
    user_id = message.from_user.id
    bot.reply_to(message, get_text('help', user_id))

@bot.message_handler(commands=['stats'])
def send_stats(message):
    user_id = message.from_user.id
    user_stats = firebase_manager.get_user_stats(user_id)
    
    stats_message = (
        "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
        f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {user_stats.get('total_attempts_used', 0)}\n"
        f"üí∞ –í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {user_stats.get('total_purchased', 0)}\n"
        f"‚è± –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats.get('created_at_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats.get('last_used_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
        f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {user_stats.get('attempts', 0)}"
    )
    
    bot.reply_to(message, stats_message, parse_mode="Markdown")

@bot.message_handler(commands=['refer'])
def send_referral(message):
    user_id = message.from_user.id
    referral_link = f"https://t.me/{bot.get_me().username}?start=ref{user_id}"
    
    markup = types.InlineKeyboardMarkup()
    share_button = types.InlineKeyboardButton(
        "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º",
        url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π%20—ç—Ç–æ—Ç%20–±–æ—Ç%20–¥–ª—è%20–∞–Ω–∞–ª–∏–∑–∞%20–æ—Ç–∑—ã–≤–æ–≤%20–Ω–∞%20Wildberries!"
    )
    markup.add(share_button)
    
    bot.reply_to(
        message,
        f"üéÅ *–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!*\n\n"
        f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
        f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`\n\n"
        f"–£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {firebase_manager.get_referral_count(user_id)} —á–µ–ª.",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.message_handler(commands=['admin'])
def admin_command(message):
    user_id = message.from_user.id
    logging.info(f"Admin command received from user {user_id}. Admin IDs: {ADMIN_IDS}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if user_id not in ADMIN_IDS:
        logging.warning(f"User {user_id} tried to access admin panel but is not in ADMIN_IDS")
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    
    args = message.text.split()
    if len(args) < 2:
        # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        bot.reply_to(message, 
            "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/admin stats - –æ–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
            "/admin user [ID] - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
            "/admin add [ID] [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏\n"
            "/admin broadcast [—Ç–µ–∫—Å—Ç] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º",
            parse_mode="Markdown"
        )
        return
    
    command = args[1]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "stats" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    if command == "stats":
        stats = firebase_manager.get_admin_stats()
        bot.reply_to(message,
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['total_attempts_used']}\n"
            f"üí∞ –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: {stats['total_payments']}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']}‚ÇΩ",
            parse_mode="Markdown"
        )
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "user" - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    elif command == "user" and len(args) > 2:
        try:
            target_user_id = int(args[2])
            user_info = firebase_manager.get_user_stats(target_user_id)
            
            if not user_info:
                bot.reply_to(message, f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            
            bot.reply_to(message,
                f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
                f"ID: {target_user_id}\n"
                f"–ü–æ–ø—ã—Ç–æ–∫: {user_info.get('attempts', 0)}\n"
                f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_info.get('total_attempts_used', 0)}\n"
                f"–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {user_info.get('total_purchased', 0)}\n"
                f"–°–æ–∑–¥–∞–Ω: {user_info.get('created_at_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_info.get('last_used_formatted', '–ù–∏–∫–æ–≥–¥–∞')}",
                parse_mode="Markdown"
            )
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "add" - –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    elif command == "add" and len(args) > 3:
        try:
            target_user_id = int(args[2])
            amount = int(args[3])
            
            if amount <= 0:
                bot.reply_to(message, "‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.")
                return
            
            firebase_manager.add_attempts(target_user_id, amount)
            bot.reply_to(message, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫.")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥—ã.")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "broadcast" - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    elif command == "broadcast" and len(args) > 2:
        broadcast_text = " ".join(args[2:])
        users = firebase_manager.get_all_users()
        sent_count = 0
        failed_count = 0
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        status_msg = bot.reply_to(message, f"‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º...")
        
        for user in users:
            try:
                user_id = user.get('user_id')
                if user_id:
                    bot.send_message(user_id, broadcast_text)
                    sent_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if sent_count % 10 == 0:
                        bot.edit_message_text(
                            f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}...",
                            chat_id=status_msg.chat.id,
                            message_id=status_msg.message_id
                        )
            except Exception as e:
                logging.error(f"Error sending broadcast to {user.get('user_id')}: {str(e)}")
                failed_count += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        bot.edit_message_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚úó –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id
        )
    
    else:
        bot.reply_to(message, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(commands=['cancel'])
def cancel_operation(message):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    user_id = message.from_user.id
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
    bot.reply_to(message, "üö´ –¢–µ–∫—É—â–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@bot.message_handler(commands=['feedback'])
def feedback_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º"""
    user_id = message.from_user.id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Ç–∑—ã–≤
    msg = bot.reply_to(message, 
        "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n"
        "–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –∏ —É—á—Ç–µ–º –µ–≥–æ –ø—Ä–∏ —É–ª—É—á—à–µ–Ω–∏–∏ –±–æ—Ç–∞!"
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(msg, process_feedback)

def process_feedback(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞"""
    user_id = message.from_user.id
    feedback_text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∑—ã–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    firebase_manager.save_feedback(user_id, feedback_text)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            bot.send_message(
                admin_id,
                f"üì® *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n\n"
                f"–û—Ç: {message.from_user.username or message.from_user.first_name} (ID: {user_id})\n\n"
                f"{feedback_text}",
                parse_mode="Markdown"
            )
        except Exception:
            pass
    
    # –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    bot.reply_to(message, 
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –æ—Ç–∑—ã–≤! –ú—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º.\n"
        "–í –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å –≤–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–Ω–∞–ª–∏–∑–∞."
    )
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–æ–Ω—É—Å–Ω—É—é –ø–æ–ø—ã—Ç–∫—É
    firebase_manager.add_attempts(user_id, 1)

@bot.message_handler(commands=['language'])
def language_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —è–∑—ã–∫–∞"""
    markup = types.InlineKeyboardMarkup(row_width=2)
    ru_button = types.InlineKeyboardButton("üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")
    en_button = types.InlineKeyboardButton("üá¨üáß English", callback_data="lang_en")
    markup.add(ru_button, en_button)
    
    bot.reply_to(
        message,
        "üåê –í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / Choose language:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('lang_'))
def language_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞"""
    user_id = call.from_user.id
    lang = call.data.split('_')[1]
    
    firebase_manager.set_user_language(user_id, lang)
    
    if lang == 'ru':
        response = "‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π"
    else:
        response = "‚úÖ Language changed to English"
    
    bot.edit_message_text(
        response,
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        logger.info(f"Received message: {message.text}")
        
        # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        bot.reply_to(message, f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}\n–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ —Å—Å—ã–ª–∫—É
        if is_wildberries_link(message.text):
            logger.info("Message is a Wildberries link")
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Å—ã–ª–∫–∏
            process_wildberries_link(message)
        elif is_article_number(message.text):
            logger.info("Message is an article number")
            # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—Ä—Ç–∏–∫—É–ª–∞
            process_article_number(message)
        else:
            logger.info("Message is neither a link nor an article number")
            # –î—Ä—É–≥–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Å Wildberries.")
    except Exception as e:
        logger.error(f"Error handling message: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@bot.callback_query_handler(func=lambda call: call.data.startswith('pay_'))
def handle_payment_callback(call):
    user_id = call.from_user.id
    plan = call.data.split('_')[1]
    
    payment_link = payment_manager.create_payment_link(user_id, plan)
    
    markup = types.InlineKeyboardMarkup()
    pay_button = types.InlineKeyboardButton(
        f"–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ",
        url=payment_link
    )
    markup.add(pay_button)
    
    bot.edit_message_reply_markup(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    
    bot.answer_callback_query(call.id)

@bot.inline_handler(lambda query: len(query.query) > 0)
def inline_query(query):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–ø—Ä–æ—Å –∞—Ä—Ç–∏–∫—É–ª–æ–º –∏–ª–∏ —Å—Å—ã–ª–∫–æ–π
        text = query.query
        is_valid_wb = text.isdigit() or ('wildberries' in text.lower() and 'catalog' in text.lower())
        
        if not is_valid_wb:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        review_handler = WbReview(text)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = types.InlineQueryResultArticle(
            id='1',
            title=f"–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤: {review_handler.item_name}",
            description=f"–ê—Ä—Ç–∏–∫—É–ª: {review_handler.sku}",
            input_message_content=types.InputTextMessageContent(
                message_text=f"üîç –ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞:\n{review_handler.item_name}\n\n–ê—Ä—Ç–∏–∫—É–ª: {review_handler.sku}"
            ),
            thumb_url="https://example.com/icon.png",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–∫–æ–Ω–∫—É
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(
                    "–ü–æ–ª—É—á–∏—Ç—å –∞–Ω–∞–ª–∏–∑",
                    url=f"https://t.me/{bot.get_me().username}?start=analyze_{review_handler.sku}"
                )
            )
        )
        
        bot.answer_inline_query(query.id, [result])
    except Exception as e:
        logging.error(f"Error in inline query: {str(e)}")

def track_analytics(user_id, action, details=None):
    """–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
    analytics_data = {
        'user_id': user_id,
        'action': action,
        'timestamp': datetime.now()
    }
    
    if details:
        analytics_data.update(details)
    
    try:
        firebase_manager.db.collection('analytics').add(analytics_data)
    except Exception as e:
        logging.error(f"Error tracking analytics: {str(e)}")

@bot.message_handler(commands=['export'])
def export_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–Ω–∞–ª–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_analysis = firebase_manager.get_last_analysis(user_id)
    
    if not last_analysis:
        bot.reply_to(message, "–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    analysis_text = (
        f"–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è —Ç–æ–≤–∞—Ä–∞: {last_analysis.get('item_name')}\n"
        f"–ê—Ä—Ç–∏–∫—É–ª: {last_analysis.get('sku')}\n"
        f"–î–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞: {last_analysis.get('created_at_formatted')}\n\n"
        f"{last_analysis.get('analysis_text')}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    with open(f"analysis_{user_id}.txt", "w", encoding="utf-8") as file:
        file.write(analysis_text)
    
    with open(f"analysis_{user_id}.txt", "rb") as file:
        bot.send_document(
            user_id,
            file,
            caption="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤"
        )
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(f"analysis_{user_id}.txt")

@bot.message_handler(commands=['compare'])
def compare_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–≤—É—Ö —Ç–æ–≤–∞—Ä–æ–≤"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = firebase_manager.get_user_attempts(user_id)
    if attempts < 2:
        bot.reply_to(
            message, 
            f"‚ùå –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 2 –ø–æ–ø—ã—Ç–∫–∏. –£ –≤–∞—Å –æ—Å—Ç–∞–ª–æ—Å—å: {attempts}."
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    msg = bot.reply_to(
        message,
        "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(msg, process_first_product)

def process_first_product(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª
    is_valid_wb = text.isdigit() or ('wildberries' in text.lower() and 'catalog' in text.lower())
    
    if not is_valid_wb:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä
    firebase_manager.set_comparison_product(user_id, 1, text)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä
    msg = bot.reply_to(
        message,
        "üîç –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è."
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(msg, process_second_product)

def process_second_product(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    user_id = message.from_user.id
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª
    is_valid_wb = text.isdigit() or ('wildberries' in text.lower() and 'catalog' in text.lower())
    
    if not is_valid_wb:
        bot.reply_to(message, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ç–æ—Ä–æ–π —Ç–æ–≤–∞—Ä
    firebase_manager.set_comparison_product(user_id, 2, text)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–∞ —Ç–æ–≤–∞—Ä–∞
    product1 = firebase_manager.get_comparison_product(user_id, 1)
    product2 = firebase_manager.get_comparison_product(user_id, 2)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    processing_msg = bot.reply_to(
        message, 
        f"‚è≥ –°—Ä–∞–≤–Ω–∏–≤–∞—é —Ç–æ–≤–∞—Ä—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±–∞ —Ç–æ–≤–∞—Ä–∞
        review_handler1 = WbReview(product1)
        reviews1 = review_handler1.parse()
        
        review_handler2 = WbReview(product2)
        reviews2 = review_handler2.parse()
        
        if not reviews1 or not reviews2:
            bot.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —Ç–æ–≤–∞—Ä–æ–≤", 
                chat_id=message.chat.id, 
                message_id=processing_msg.message_id
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã –æ–±–æ–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤
        reviews_text1 = "\n".join(reviews1)
        analysis1 = analyze_reviews_cached(review_handler1.sku, reviews_text1)
        
        reviews_text2 = "\n".join(reviews2)
        analysis2 = analyze_reviews_cached(review_handler2.sku, reviews_text2)
        
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        comparison = compare_products(review_handler1, review_handler2, analysis1, analysis2)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ (2 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ)
        firebase_manager.decrease_attempts(user_id)
        firebase_manager.decrease_attempts(user_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.edit_message_text(
            comparison,
            chat_id=message.chat.id,
            message_id=processing_msg.message_id,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ä–∞–≤–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}", 
            chat_id=message.chat.id,
            message_id=processing_msg.message_id
        )

def compare_products(product1, product2, analysis1, analysis2):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–≤—É—Ö —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤"""
    return (
        f"üìä *–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤*\n\n"
        f"üîµ *{product1.item_name}* (–ê—Ä—Ç–∏–∫—É–ª: {product1.sku})\n"
        f"üî¥ *{product2.item_name}* (–ê—Ä—Ç–∏–∫—É–ª: {product2.sku})\n\n"
        f"*–ê–Ω–∞–ª–∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:*\n{analysis1}\n\n"
        f"*–ê–Ω–∞–ª–∏–∑ –≤—Ç–æ—Ä–æ–≥–æ —Ç–æ–≤–∞—Ä–∞:*\n{analysis2}\n\n"
        f"*–í—ã–≤–æ–¥:*\n–ù–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–æ–≤–∞—Ä, –∫–æ—Ç–æ—Ä—ã–π –ª—É—á—à–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º."
    )

@bot.message_handler(commands=['search'])
def search_command(message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    msg = bot.reply_to(
        message,
        "üîç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '—Å–º–∞—Ä—Ç—Ñ–æ–Ω—ã', '–ø–ª–∞—Ç—å—è', '–∫—Ä–æ—Å—Å–æ–≤–∫–∏')."
    )
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
    bot.register_next_step_handler(msg, process_category_search)

def process_category_search(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    user_id = message.from_user.id
    category = message.text.strip()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–æ–∏—Å–∫–∞
    processing_msg = bot.reply_to(
        message, 
        f"‚è≥ –ò—â—É –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è."
    )
    
    try:
        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
        products = search_products_by_category(category)
        
        if not products:
            bot.edit_message_text(
                f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'", 
                chat_id=message.chat.id, 
                message_id=processing_msg.message_id
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        result_message = f"üõçÔ∏è *–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'*\n\n"
        
        for i, product in enumerate(products[:5], 1):
            result_message += (
                f"{i}. [{product['name']}](https://www.wildberries.ru/catalog/{product['id']}/detail.aspx)\n"
                f"   –¶–µ–Ω–∞: {product['price']}‚ÇΩ\n"
                f"   –†–µ–π—Ç–∏–Ω–≥: {product['rating']}\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        markup = types.InlineKeyboardMarkup(row_width=1)
        
        for i, product in enumerate(products[:5], 1):
            analyze_button = types.InlineKeyboardButton(
                f"–ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞ #{i}",
                callback_data=f"analyze_{product['id']}"
            )
            markup.add(analyze_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        bot.edit_message_text(
            result_message,
            chat_id=message.chat.id,
            message_id=processing_msg.message_id,
            parse_mode="Markdown",
            reply_markup=markup,
            disable_web_page_preview=True
        )
        
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}", 
            chat_id=message.chat.id,
            message_id=processing_msg.message_id
        )

def search_products_by_category(category: str) -> list:
    """–ü–æ–∏—Å–∫ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –∫ API Wildberries
        search_url = f"https://search.wb.ru/exactmatch/ru/common/v4/search?appType=1&couponsGeo=12,3,18,15,21&curr=rub&dest=-1029256,-102269,-2162196,-1257786&emp=0&lang=ru&locale=ru&pricemarginCoeff=1.0&query={category}&reg=0&regions=68,64,83,4,38,80,33,70,82,86,75,30,69,22,66,31,40,1,48,71&resultset=catalog&sort=popular&spp=0&suppressSpellcheck=false"
        
        response = requests.get(search_url, headers={'User-Agent': 'Mozilla/5.0'})
        
        if response.status_code != 200:
            return []
        
        data = response.json()
        
        if not data.get('data') or not data['data'].get('products'):
            return []
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —É–¥–æ–±–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        products = []
        
        for product in data['data']['products'][:10]:  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 10 —Ç–æ–≤–∞—Ä–æ–≤
            products.append({
                'id': product.get('id', 0),
                'name': product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                'price': product.get('priceU', 0) / 100,  # –¶–µ–Ω–∞ –≤ –∫–æ–ø–µ–π–∫–∞—Ö
                'rating': product.get('rating', 0),
                'feedbacks': product.get('feedbacks', 0)
            })
        
        return products
    
    except Exception as e:
        logging.error(f"Error searching products: {str(e)}")
        return []

@bot.callback_query_handler(func=lambda call: call.data.startswith('analyze_'))
def handle_analyze_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–Ω–∞–ª–∏–∑–∞ —Ç–æ–≤–∞—Ä–∞"""
    user_id = call.from_user.id
    product_id = call.data.split('_')[1]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    attempts = firebase_manager.get_user_attempts(user_id)
    if attempts <= 0:
        bot.answer_callback_query(
            call.id,
            "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∏—Ö, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
            show_alert=True
        )
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
    bot.edit_message_text(
        f"‚è≥ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã —Ç–æ–≤–∞—Ä–∞... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    
    try:
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–æ–≤–∞—Ä
        review_handler = WbReview(product_id)
        reviews = review_handler.parse()
        
        if not reviews:
            bot.edit_message_text(
                "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–∑—ã–≤–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞", 
                chat_id=call.message.chat.id, 
                message_id=call.message.message_id
            )
            return
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–∑—ã–≤—ã
        reviews_text = "\n".join(reviews)
        analysis = analyze_reviews_cached(review_handler.sku, reviews_text)
        
        # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        remaining_attempts = firebase_manager.decrease_attempts(user_id)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ –∏ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –ø–æ–ø—ã—Ç–∫–∞—Ö
        analysis_with_info = (
            f"üõçÔ∏è *{review_handler.item_name}*\n"
            f"üì¶ –ê—Ä—Ç–∏–∫—É–ª: {review_handler.sku}\n\n"
            f"{analysis}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}"
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup(row_width=2)
        view_button = types.InlineKeyboardButton(
            "üîç –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ WB",
            url=f"https://www.wildberries.ru/catalog/{review_handler.sku}/detail.aspx"
        )
        share_button = types.InlineKeyboardButton(
            "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
            switch_inline_query=review_handler.sku
        )
        markup.add(view_button, share_button)
        
        bot.edit_message_text(
            analysis_with_info,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        bot.edit_message_text(
            f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", 
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
    
    bot.answer_callback_query(call.id)

@bot.message_handler(commands=['test_firebase'])
def test_firebase(message):
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase
        stats = firebase_manager.get_user_stats(user_id)
        bot.reply_to(message, f"Firebase —Ä–∞–±–æ—Ç–∞–µ—Ç! –í–∞—à–∏ –ø–æ–ø—ã—Ç–∫–∏: {stats.get('attempts', 0)}")
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ Firebase: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('menu_'))
def handle_menu_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    user_id = call.from_user.id
    action = call.data.split('_')[1]
    
    if action == "analyze":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä
        msg = bot.send_message(
            call.message.chat.id,
            "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞."
        )
        
    elif action == "stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_stats = firebase_manager.get_user_stats(user_id)
        
        stats_message = (
            "üìä *–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {user_stats.get('total_attempts_used', 0)}\n"
            f"üí∞ –í—Å–µ–≥–æ –æ–ø–ª–∞—á–µ–Ω–æ –ø–æ–ø—ã—Ç–æ–∫: {user_stats.get('total_purchased', 0)}\n"
            f"‚è± –ü–µ—Ä–≤–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats.get('created_at_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"üîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_stats.get('last_used_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n"
            f"–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {user_stats.get('attempts', 0)}"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        markup.add(back_button)
        
        bot.send_message(
            call.message.chat.id,
            stats_message,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    elif action == "refer":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = f"https://t.me/{bot.get_me().username}?start=ref{user_id}"
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        share_button = types.InlineKeyboardButton(
            "üì§ –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –±–æ—Ç–æ–º",
            url=f"https://t.me/share/url?url={referral_link}&text=–ü–æ–ø—Ä–æ–±—É–π%20—ç—Ç–æ—Ç%20–±–æ—Ç%20–¥–ª—è%20–∞–Ω–∞–ª–∏–∑–∞%20–æ—Ç–∑—ã–≤–æ–≤%20–Ω–∞%20Wildberries!"
        )
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        markup.add(share_button, back_button)
        
        bot.send_message(
            call.message.chat.id,
            f"üéÅ *–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã!*\n\n"
            f"–ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞.\n\n"
            f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n`{referral_link}`\n\n"
            f"–£–∂–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {firebase_manager.get_referral_count(user_id)} —á–µ–ª.",
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    elif action == "help":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø—Ä–∞–≤–∫—É
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        markup.add(back_button)
        
        bot.send_message(
            call.message.chat.id,
            "ü§ñ *–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:*\n\n"
            "1Ô∏è‚É£ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä —Å Wildberries –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞\n"
            "2Ô∏è‚É£ –Ø –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é –æ—Ç–∑—ã–≤—ã –∏ –≤—ã–¥–µ–ª—é –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–ª—é—Å—ã –∏ –º–∏–Ω—É—Å—ã\n"
            "3Ô∏è‚É£ –ö–∞–∂–¥—ã–π –∞–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥—É–µ—Ç 1 –ø–æ–ø—ã—Ç–∫—É\n\n"
            "üí∞ –ö–æ–≥–¥–∞ –ø–æ–ø—ã—Ç–∫–∏ –∑–∞–∫–æ–Ω—á–∞—Ç—Å—è, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ\n\n"
            "‚ùì –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –Ω–∞–ø–∏—à–∏—Ç–µ @–≤–∞—à_–∫–æ–Ω—Ç–∞–∫—Ç",
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    elif action == "admin" and user_id in ADMIN_IDS:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        show_admin_panel(call.message)
    
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã –∑–∞–≥—Ä—É–∑–∫–∏
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_menu")
def back_to_menu(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    user_id = call.from_user.id
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    analyze_button = types.InlineKeyboardButton("üîç –ê–Ω–∞–ª–∏–∑ —Ç–æ–≤–∞—Ä–∞", callback_data="menu_analyze")
    stats_button = types.InlineKeyboardButton("üìä –ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="menu_stats")
    refer_button = types.InlineKeyboardButton("üë• –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–∑–µ–π", callback_data="menu_refer")
    help_button = types.InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="menu_help")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    if user_id in ADMIN_IDS:
        admin_button = types.InlineKeyboardButton("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="menu_admin")
        markup.add(analyze_button, stats_button, refer_button, help_button, admin_button)
    else:
        markup.add(analyze_button, stats_button, refer_button, help_button)
    
    bot.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        reply_markup=markup
    )
    
    bot.answer_callback_query(call.id)

def show_admin_panel(message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    markup = types.InlineKeyboardMarkup(row_width=1)
    
    stats_button = types.InlineKeyboardButton("üìä –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin_stats")
    user_button = types.InlineKeyboardButton("üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ", callback_data="admin_user")
    add_button = types.InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏", callback_data="admin_add")
    broadcast_button = types.InlineKeyboardButton("üì£ –†–∞—Å—Å—ã–ª–∫–∞", callback_data="admin_broadcast")
    back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")
    
    markup.add(stats_button, user_button, add_button, broadcast_button, back_button)
    
    bot.send_message(
        message.chat.id,
        "üîß *–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å*\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_'))
def handle_admin_callback(call):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    action = call.data.split('_')[1]
    
    if action == "stats":
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = firebase_manager.get_admin_stats()
        
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.edit_message_text(
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞*\n\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['total_users']}\n"
            f"üîç –í—Å–µ–≥–æ –∞–Ω–∞–ª–∏–∑–æ–≤: {stats['total_attempts_used']}\n"
            f"üí∞ –í—Å–µ–≥–æ –æ–ø–ª–∞—Ç: {stats['total_payments']}\n"
            f"üíµ –û–±—â–∞—è —Å—É–º–º–∞: {stats['total_amount']}‚ÇΩ",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    elif action == "user":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        msg = bot.edit_message_text(
            "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_user_id_request)
        
    elif action == "add":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        msg = bot.edit_message_text(
            "‚ûï –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä: 123456789 10):",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_add_attempts_request)
        
    elif action == "broadcast":
        # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
        msg = bot.edit_message_text(
            "üì£ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥
        bot.register_next_step_handler(msg, process_broadcast_request)
    
    bot.answer_callback_query(call.id)

@bot.callback_query_handler(func=lambda call: call.data == "back_to_admin")
def back_to_admin(call):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    show_admin_panel(call.message)
    bot.answer_callback_query(call.id)

def process_user_id_request(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        target_user_id = int(message.text.strip())
        user_info = firebase_manager.get_user_stats(target_user_id)
        
        if not user_info:
            markup = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
            markup.add(back_button)
            
            bot.reply_to(
                message, 
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {target_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=markup
            )
            return
        
        markup = types.InlineKeyboardMarkup(row_width=1)
        add_button = types.InlineKeyboardButton(
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ø—ã—Ç–∫–∏ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", 
            callback_data=f"admin_add_to_{target_user_id}"
        )
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(add_button, back_button)
        
        bot.reply_to(
            message,
            f"üë§ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ*\n\n"
            f"ID: {target_user_id}\n"
            f"–ü–æ–ø—ã—Ç–æ–∫: {user_info.get('attempts', 0)}\n"
            f"–í—Å–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {user_info.get('total_attempts_used', 0)}\n"
            f"–í—Å–µ–≥–æ –∫—É–ø–ª–µ–Ω–æ: {user_info.get('total_purchased', 0)}\n"
            f"–°–æ–∑–¥–∞–Ω: {user_info.get('created_at_formatted', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
            f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: {user_info.get('last_used_formatted', '–ù–∏–∫–æ–≥–¥–∞')}",
            parse_mode="Markdown",
            reply_markup=markup
        )
        
    except ValueError:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID.",
            reply_markup=markup
        )

def process_add_attempts_request(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        parts = message.text.strip().split()
        if len(parts) != 2:
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        target_user_id = int(parts[0])
        amount = int(parts[1])
        
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        firebase_manager.add_attempts(target_user_id, amount)
        
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_markup=markup
        )
        
    except ValueError as e:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.",
            reply_markup=markup
        )

def process_broadcast_request(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    broadcast_text = message.text.strip()
    
    if not broadcast_text:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            "‚ùå –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.",
            reply_markup=markup
        )
        return
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    markup = types.InlineKeyboardMarkup(row_width=2)
    confirm_button = types.InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"confirm_broadcast_{message.message_id}")
    cancel_button = types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="back_to_admin")
    markup.add(confirm_button, cancel_button)
    
    bot.reply_to(
        message,
        f"üì£ *–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–∞—Å—Å—ã–ª–∫–∏:*\n\n{broadcast_text}\n\n"
        f"–û—Ç–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º?",
        parse_mode="Markdown",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_broadcast_'))
def confirm_broadcast(call):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    user_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º —Ä–∞—Å—Å—ã–ª–∫–∏
    message_id = int(call.data.split('_')[2])
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        broadcast_text = bot.get_message(call.message.chat.id, message_id).text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        status_msg = bot.edit_message_text(
            "‚è≥ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = firebase_manager.get_all_users()
        sent_count = 0
        failed_count = 0
        
        for user in users:
            try:
                user_id = user.get('user_id')
                if user_id:
                    bot.send_message(user_id, broadcast_text)
                    sent_count += 1
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    if sent_count % 10 == 0:
                        bot.edit_message_text(
                            f"‚è≥ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}/{len(users)}...",
                            chat_id=status_msg.chat.id,
                            message_id=status_msg.message_id
                        )
            except Exception as e:
                logging.error(f"Error sending broadcast to {user.get('user_id')}: {str(e)}")
                failed_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º
        bot.edit_message_text(
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"‚úì –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {sent_count}\n"
            f"‚úó –û—à–∏–±–æ–∫: {failed_count}\n"
            f"üìä –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}",
            chat_id=status_msg.chat.id,
            message_id=status_msg.message_id,
            reply_markup=markup
        )
        
    except Exception as e:
        bot.answer_callback_query(call.id, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@bot.callback_query_handler(func=lambda call: call.data.startswith('admin_add_to_'))
def add_attempts_to_user(call):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    admin_id = call.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if admin_id not in ADMIN_IDS:
        bot.answer_callback_query(call.id, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.", show_alert=True)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    target_user_id = int(call.data.split('_')[-1])
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
    msg = bot.edit_message_text(
        f"‚ûï –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}:",
        chat_id=call.message.chat.id,
        message_id=call.message.message_id
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
    bot.register_next_step_handler(msg, lambda m: process_add_attempts_to_user(m, target_user_id))
    
    bot.answer_callback_query(call.id)

def process_add_attempts_to_user(message, target_user_id):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if user_id not in ADMIN_IDS:
        bot.reply_to(message, "‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏.")
        return
    
    try:
        amount = int(message.text.strip())
        
        if amount <= 0:
            raise ValueError("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º")
        
        firebase_manager.add_attempts(target_user_id, amount)
        
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id} –¥–æ–±–∞–≤–ª–µ–Ω–æ {amount} –ø–æ–ø—ã—Ç–æ–∫.",
            reply_markup=markup
        )
        
    except ValueError as e:
        markup = types.InlineKeyboardMarkup()
        back_button = types.InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data="back_to_admin")
        markup.add(back_button)
        
        bot.reply_to(
            message, 
            f"‚ùå –û—à–∏–±–∫–∞: {str(e)}. –í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.",
            reply_markup=markup
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å—Å—ã–ª–∫–æ–π –Ω–∞ Wildberries
def is_wildberries_link(text):
    logger.debug(f"Checking if text is a Wildberries link: {text}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Å—ã–ª–∫—É Wildberries
    return bool(re.search(r'https?://[^/]*wildberries\.ru/[^\s]+', text))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–º
def is_article_number(text):
    logger.debug(f"Checking if text is an article number: {text}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞—Ä—Ç–∏–∫—É–ª (–æ–±—ã—á–Ω–æ —ç—Ç–æ —á–∏—Å–ª–æ)
    return bool(re.match(r'^\d+$', text.strip()))

def process_wildberries_link(message):
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏
        article = extract_article_from_link(message.text)
        if article:
            logger.info(f"Extracted article {article} from link")
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª
            process_article_number(message, article)
        else:
            logger.warning(f"Could not extract article from link: {message.text}")
            bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –∞—Ä—Ç–∏–∫—É–ª –∏–∑ —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–ø—Ä—è–º—É—é.")
    except Exception as e:
        logger.error(f"Error processing Wildberries link: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Å—ã–ª–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª –Ω–∞–ø—Ä—è–º—É—é.")

def process_article_number(message, article=None):
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∞—Ä—Ç–∏–∫—É–ª –∏–ª–∏ –±–µ—Ä–µ–º –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        article = article or message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        user_id = message.from_user.id
        attempts = firebase_manager.get_attempts(user_id)
        
        if attempts <= 0:
            # –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –ø–æ–ø—ã—Ç–æ–∫
            logger.info(f"User {user_id} has no attempts left")
            send_no_attempts_message(message)
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        bot.reply_to(message, "–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–æ–¥ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –æ—Ç–∑—ã–≤–æ–≤
        # ...
        
    except Exception as e:
        logger.error(f"Error processing article number: {str(e)}", exc_info=True)
        bot.reply_to(message, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—Ä—Ç–∏–∫—É–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
    logging.info(f"Registered handlers: {bot.message_handlers}")
    
    # –Ø–≤–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    bot.remove_webhook()
    bot.polling(none_stop=True)
