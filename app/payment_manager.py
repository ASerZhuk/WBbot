from urllib.parse import urlencode
from config import WEBHOOK_HOST  # –í–µ—Ä–Ω–µ–º –∏–º–ø–æ—Ä—Ç WEBHOOK_HOST
import logging

class PaymentManager:
    def __init__(self):
        self.wallet = "4100117527556990"  # –ù–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –ÆMoney
        self.plans = {
            'basic': {'amount': 50, 'attempts': 10, 'name': '–ë–∞–∑–æ–≤—ã–π'},
            'standard': {'amount': 150, 'attempts': 30, 'name': '–°—Ç–∞–Ω–¥–∞—Ä—Ç'},
            'premium': {'amount': 350, 'attempts': 70, 'name': '–ü—Ä–µ–º–∏—É–º'}
        }
        self.amount = self.plans['basic']['amount']  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –±–∞–∑–æ–≤—ã–π –ø–ª–∞–Ω

    def create_payment_link(self, user_id: int, plan: str = 'basic') -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É"""
        if plan not in self.plans:
            plan = 'basic'
        
        plan_data = self.plans[plan]
        
        payment_params = {
            'targets': f'–ê–Ω–∞–ª–∏–∑ –æ—Ç–∑—ã–≤–æ–≤ WB - {plan_data["name"]}',
            'default-sum': plan_data['amount'],
            'button-text': 'pay',
            'any-card-payment-type': 'on',
            'button-size': 'm',
            'button-color': 'orange',
            'mail': 'on',
            'successURL': f'{WEBHOOK_HOST}/webhook/payment-success?userId={user_id}',
            'quickpay-form': 'shop',
            'account': self.wallet,
            'label': f'wb_review_bot_{user_id}_{plan}',
            'need-fio': 'false',
            'need-email': 'false',
            'need-phone': 'false',
            'redirect': 'true',
            'clearCache': 'true',
            'autoReturn': 'true',
            'targets-hint': '',
            'return-url': f'{WEBHOOK_HOST}/webhook/payment-success?userId={user_id}'
        }
        
        return f"https://yoomoney.ru/quickpay/button-widget?{urlencode(payment_params)}"

    def get_payment_message(self) -> tuple[str, list]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫"""
        message = (
            "‚ùå –£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ø–æ–ø—ã—Ç–∫–∏ –∞–Ω–∞–ª–∏–∑–∞!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω:\n"
            f"üîπ *–ë–∞–∑–æ–≤—ã–π*: {self.plans['basic']['attempts']} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {self.plans['basic']['amount']}‚ÇΩ\n"
            f"üîπ *–°—Ç–∞–Ω–¥–∞—Ä—Ç*: {self.plans['standard']['attempts']} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {self.plans['standard']['amount']}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 25%)\n"
            f"üîπ *–ü—Ä–µ–º–∏—É–º*: {self.plans['premium']['attempts']} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞ {self.plans['premium']['amount']}‚ÇΩ (—ç–∫–æ–Ω–æ–º–∏—è 40%)\n\n"
            "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –ø–æ–ø—ã—Ç–∫–∏ –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
        )
        
        buttons = [
            {'text': f"üí≥ –ë–∞–∑–æ–≤—ã–π ({self.plans['basic']['amount']}‚ÇΩ)", 'plan': 'basic'},
            {'text': f"üí≥ –°—Ç–∞–Ω–¥–∞—Ä—Ç ({self.plans['standard']['amount']}‚ÇΩ)", 'plan': 'standard'},
            {'text': f"üí≥ –ü—Ä–µ–º–∏—É–º ({self.plans['premium']['amount']}‚ÇΩ)", 'plan': 'premium'}
        ]
        
        return message, buttons

    def verify_payment(self, notification_data: dict) -> tuple[bool, int]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É
            amount = float(notification_data.get('amount', 0))
            if amount != self.amount:
                logging.warning(f"Payment amount mismatch: expected {self.amount}, got {amount}")
                return False, 0

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞
            status = notification_data.get('status', '')
            if status != 'success':
                logging.warning(f"Payment status is not success: {status}")
                return False, 0

            # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ label
            label = notification_data.get('label', '')
            if not label.startswith('wb_review_bot_'):
                logging.warning(f"Invalid payment label: {label}")
                return False, 0

            user_id = int(label.split('_')[-1])
            logging.info(f"Payment verified for user {user_id}")
            return True, user_id

        except Exception as e:
            logging.error(f"Payment verification error: {str(e)}")
            return False, 0 